head	1.1;
access;
symbols;
locks
	gabriel.tavora:1.1; strict;
comment	@ * @;


1.1
date	2017.12.21.22.04.50;	author gabriel.tavora;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Universidade Federal do Rio de Janeiro
 * Escola Politecnica
 * Departamento de Eletronica e de Computacao
 * Prof. Marcelo Luiz Drumond Lanza
 * EEL 270 - Computacao II - Turma 2017/2
 *
 * $Author$
 * $Date$
 * $Log$
 *
 */

#include<stdlib.h>
#include<stdio.h>
#include<string.h>

#include "gmtUmlConst.h"
#include "gmtUmlTypes.h"
#include "./Libraries/mlcgi.h"
#include "gmtUmlErrors.h"
#include "gmtUmlFunctions.h"
#include "gmtUmlWebUserInterface.h"
#include "gmtUmlGetUsers.h"

int
main (int argc, char **argv)
{
  gmtUmlConfigurationOptionsType *configurationOptions;
  gmtUmlUserDataType *gmtUmlUserData;
  environmentType gmtUmlEnvironment;
  gmtUmlLanguageType gmtUmlLanguage = gmtUmlEnglish;
  gmtUmlErrorType gmtUmlValidation;
  char gmtUmlNickname [GMT_UML_MAX_NICKNAME_LENGTH+1],
       gmtUmlPassword [GMT_UML_MAX_PASSWORD_LENGTH+1],
       gmtUmlConfigurationFileName [GMT_UML_MAX_FILE_NAME_LENGTH+1],
       gmtUmlLanguageName [GMT_UML_MAX_LANGUAGE_LENGTH+1];

  if (!(configurationOptions = malloc (sizeof (gmtUmlConfigurationOptionsType))))
    exit (gmtUmlErrorAllocatingMemory);

  if (!(gmtUmlUserData = malloc (sizeof (gmtUmlUserDataType))))
    exit (gmtUmlErrorAllocatingMemory);

  if (mlCgiInitialize(&gmtUmlEnvironment))
  {
    free (configurationOptions);
    free (gmtUmlUserData);
    exit (ML_CGI_OK);
  }
  
  if (gmtUmlEnvironment == commandLine)
  {
    switch (gmtUmlLanguage)
    {
      default:
      case gmtUmlEnglish:
      printf ("ERROR: Invalid environment.\n");
      break;
      
      case gmtUmlPortuguese:
      printf ("ERRO: Ambiente invalido.\n");
      break;
    }

    free (configurationOptions);
    free (gmtUmlUserData);
    exit (gmtUmlErrorInvalidEnvironment);
  }

  if ((gmtUmlValidation = mlCgiGetFormStringNoNewLines ("gmtUmlConfigurationFileName", gmtUmlConfigurationFileName, GMT_UML_MAX_FILE_NAME_LENGTH+1)))
  {
    strcpy (gmtUmlConfigurationFileName, GMT_UML_DEFAULT_CONFIG_FILE);
  }
  
  if ((gmtUmlValidation = mlCgiGetFormStringNoNewLines ("gmtUmlLanguage", gmtUmlLanguageName, GMT_UML_MAX_FILE_NAME_LENGTH + 1)))
  {
    strcpy (gmtUmlLanguageName, "english");
  }

  /* HTML HEADER */
  
  mlCgiBeginHttpHeader ("text/html");
  mlCgiEndHttpHeader ();

  gmtUmlLanguage = GmtUmlGetLanguageIndex (gmtUmlLanguageName);

  if ((gmtUmlValidation = GmtUmlGetConfigurationOptionsValues (gmtUmlConfigurationFileName, configurationOptions)))
  {
    printf ("ERROR (#%i): %s.\n", gmtUmlValidation, GmtUmlGetWebErrorMessage (gmtUmlValidation, gmtUmlLanguage));
    free (configurationOptions);
    free (gmtUmlUserData);
    exit (gmtUmlValidation);
  }

  if (mlCgiGetFormStringNoNewLines ("nickname", gmtUmlNickname, GMT_UML_MAX_FILE_NAME_LENGTH + 1))
  {
    printf ("ERROR (#%i): %s.\n", gmtUmlErrorInvalidNickname, GmtUmlGetWebErrorMessage (gmtUmlErrorInvalidNickname, gmtUmlLanguage));
    free (configurationOptions);
    free (gmtUmlUserData);
    exit (gmtUmlErrorInvalidNickname);
  }

  if (mlCgiGetFormStringNoNewLines ("password", gmtUmlPassword, GMT_UML_MAX_FILE_NAME_LENGTH + 1))
  {
    printf ("ERROR (#%i): %s.\n", gmtUmlErrorInvalidPassword, GmtUmlGetWebErrorMessage (gmtUmlErrorInvalidPassword, gmtUmlLanguage));
    free (configurationOptions);
    free (gmtUmlUserData);
    exit (gmtUmlErrorInvalidNickname);
  }

  if ((gmtUmlValidation = GmtUmlCheckStringField (gmtUmlNickname, GMT_UML_NICKNAME_VALID_CHARS, 3, GMT_UML_MAX_NICKNAME_LENGTH)))
  {
    printf ("ERROR (#%i): %s.\n", gmtUmlValidation, GmtUmlGetWebErrorMessage (gmtUmlValidation, gmtUmlLanguage));
    free (configurationOptions);
    free (gmtUmlUserData);
    exit (gmtUmlValidation);
  }

  if ((gmtUmlValidation = GmtUmlCheckStringField (gmtUmlPassword, GMT_UML_PASSWORD_VALID_CHARS, GMT_UML_MIN_PASSWORD_LENGTH, GMT_UML_MAX_PASSWORD_LENGTH)))
  {
    printf ("ERROR (#%i): %s.\n", gmtUmlValidation, GmtUmlGetWebErrorMessage (gmtUmlValidation, gmtUmlLanguage));
    free (configurationOptions);
    free (gmtUmlUserData);
    exit (gmtUmlValidation);
  }

  if ((gmtUmlValidation = GmtUmlLogin (gmtUmlNickname, gmtUmlPassword, configurationOptions, gmtUmlUserData)))
  {
    printf ("ERROR (#%i): %s.\n", gmtUmlValidation, GmtUmlGetWebErrorMessage (gmtUmlValidation, gmtUmlLanguage));
    free (configurationOptions);
    free (gmtUmlUserData);
    exit (gmtUmlValidation);
  }

  printf ("Logado.\n");
  free (configurationOptions);
  free (gmtUmlUserData);

  mlCgiFreeResources ();
  return ML_CGI_OK;
}

/* $RCSfile$ */
@
